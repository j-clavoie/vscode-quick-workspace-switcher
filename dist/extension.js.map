{"version":3,"sources":[".././src/extension.js","../external \"vscode\"","../webpack/bootstrap","../webpack/startup"],"names":["vscode","activate","context","disposable","commands","registerCommand","async","workspacePath","extConfigs","workspace","getConfiguration","listWorspaces","options","QuickPickOptions","placeHolder","canPickMany","ignoreFocusOut","matchOnDescription","matchOnDetail","workspaces","forEach","elem","push","name","workspaceName","window","showQuickPick","undefined","path","getWorkspacePath","workspaceUri","Uri","file","executeCommand","switchWetWorkspace","subscriptions","exports","module","deactivate","require","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":"0CAAA,MAAMA,EAAS,EAAQ,KAKvB,SAASC,EAASC,GACjB,IAAIC,EAAaH,EAAOI,SAASC,gBAAgB,mCAAmCC,uBAuBrFA,iBAEC,IAAIC,QAiBLD,iBAEC,MAAME,EAAaR,EAAOS,UAAUC,iBAAiB,4BAErD,IAAIC,EAAgB,GAGhBC,EAAUZ,EAAOa,iBAAmB,CACvCC,YAAa,8CACbC,aAAa,EACbC,gBAAgB,EAChBC,oBAAoB,EACpBC,eAAe,GAIhBV,EAAWW,WAAWC,SAAQ,SAAUC,GAEvCV,EAAcW,KAAKD,EAAKE,SAIzB,MAAMC,QAAsBxB,EAAOyB,OAAOC,cAAcf,EAAeC,GAEvE,GAAqBe,MAAjBH,EACH,OAAO,KAIR,IAAIjB,EAAgB,KAUpB,OARAC,EAAWW,WAAWC,SAAQ,SAAUC,GAEnCG,GAAiBH,EAAKE,OACzBhB,EAAgBc,EAAKO,SAKhBrB,EAxDmBsB,GAE1B,GAAqB,MAAjBtB,EACH,OAGD,IAAIuB,EAAe9B,EAAO+B,IAAIC,KAAKzB,SAE7BP,EAAOI,SAAS6B,eAAe,oBAAqBH,GA/BnDI,MAEPhC,EAAQiC,cAAcb,KAAKnB,GAE5BiC,EAAQnC,SAAWA,EAEnBoC,EAAOD,QAAU,CAChBnC,WACAqC,WAHD,e,qBCbAD,EAAOD,QAAUG,QAAQ,YCCrBC,EAA2B,GCE/B,ODCA,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAUN,QAG3C,IAAIC,EAASG,EAAyBE,GAAY,CAGjDN,QAAS,IAOV,OAHAO,EAAoBD,GAAUL,EAAQA,EAAOD,QAASK,GAG/CJ,EAAOD,QCjBRK,CAAoB,M","file":"extension.js","sourcesContent":["const vscode = require('vscode');\n\n/**\n * @param {vscode.ExtensionContext} context\n */\nfunction activate(context) {\n\tlet disposable = vscode.commands.registerCommand('quick-workspace-switcher.select', async function () {\n\t\t// Call the main function\n\t\tawait switchWetWorkspace();\n\t});\n\tcontext.subscriptions.push(disposable);\n}\nexports.activate = activate;\nfunction deactivate() { }\nmodule.exports = {\n\tactivate,\n\tdeactivate\n}\n\n\n/* ******************************************************************************** */\n/* ******************************************************************************** */\n/* ******************************************************************************** */\n/* ******************************************************************************** */\n\n\n/**\n * Method that open the Workspace selected by the user\n */\nasync function switchWetWorkspace() {\n\t// Get a Workspace path to open\n\tlet workspacePath = await getWorkspacePath();\n\t// If null then exit without any more process\n\tif (workspacePath == null) {\n\t\treturn;\n\t}\n\t// Set the path to open\n\tlet workspaceUri = vscode.Uri.file(workspacePath);\n\t// Open the Workspace\n\tawait vscode.commands.executeCommand('vscode.openFolder', workspaceUri);\n}\n\n\n/**\n * Method to get from a dropdown popup a workspace and\n * return the path of this workspace\n * All information about workspace are stored in Extension properties\n */\nasync function getWorkspacePath() {\n\t// Get Extension properties\n\tconst extConfigs = vscode.workspace.getConfiguration(\"quick-workspace-switcher\");\n\t// Create a empty array that will contain all Workspace Names\n\tlet listWorspaces = [];\n\n\t// Option for the dropdown popup\n\tlet options = vscode.QuickPickOptions = {\n\t\tplaceHolder: \"Select the Workspace you want to switch to:\",\n\t\tcanPickMany: false,\n\t\tignoreFocusOut: true,\n\t\tmatchOnDescription: true,\n\t\tmatchOnDetail: true\n\t};\n\n\t// Pass through all Workspace set in Extension properties\n\textConfigs.workspaces.forEach(function (elem) {\n\t\t// Add only the name to the array\n\t\tlistWorspaces.push(elem.name);\n\t});\n\n\t// Display the dropdown popup to user\n\tconst workspaceName = await vscode.window.showQuickPick(listWorspaces, options);\n\t// If Escape key has been used = exit without any other process\n\tif (workspaceName == undefined) {\n\t\treturn null;\n\t}\n\n\t// Define de default return for this function (null)\n\tlet workspacePath = null;\n\t// Pass through all Workspace set in Extension properties\n\textConfigs.workspaces.forEach(function (elem) {\n\t\t// If the user's selection match set the path to return\n\t\tif (workspaceName == elem.name) {\n\t\t\tworkspacePath = elem.path;\n\t\t}\n\t});\n\n\t// Return the path or NULL if the escape key has been used\n\treturn workspacePath;\n}\n\n\n","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(474);\n"],"sourceRoot":""}